{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 6,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "e2f48814-8bd5-484d-8c8a-43571a6df6f2"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 6700,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "suffix: W",
          "unitScale": true
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^.*(Battery Dischar).*"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "red"
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumed"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "red"
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SolarDC"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "yellow"
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^.*(Net Fr).*"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "red"
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "10.3.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e2f48814-8bd5-484d-8c8a-43571a6df6f2"
          },
          "query": "//\n// Power Current\n//\n\nimport \"experimental\"\nimport \"math\"\nimport \"date\"\nimport \"strings\"\n\nReLU = (x) => if x > 0.0 then x else 0.0\n\nfieldsCommon = [\"UDC\", \"IDC\", \"UDC_2\", \"IDC_2\", \"PAC\"]\nfieldsBattery = [\"Voltage_DC\", \"Current_DC\", \"StateOfCharge_Relative\"]\nrES = 6 // time to aggregate over (s), duration returns ns\n\nbasic = from(bucket: \"Fronius\")\n  |> range(start: -1m, stop: date.truncate(t: now(), unit: duration(v: rES * 1000000000)))\n  |> filter(fn: (r) => (r[\"_measurement\"] == \"Battery\" and contains(value: r._field, set: fieldsBattery)) or\n                       (r[\"_measurement\"] == \"CommonInverterData\" and contains(value: r._field, set: fieldsCommon)) or\n                       (r[\"_measurement\"] == \"SmartMeter\" and r[\"_field\"] == \"PowerReal_P_Sum\")\n    )\n  |> aggregateWindow(every: duration(v: rES * 1000000000), fn: last, createEmpty: false)\n  |> last()\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\", \"_measurement\"], valueColumn: \"_value\")\n  |> rename(columns: {\n    PowerReal_P_Sum_SmartMeter: \"PowerNet\",\n    PAC_CommonInverterData: \"PowerAC\",\n    StateOfCharge_Relative_Battery: \"Battery Loading Level\"\n    })\n  |> map(fn: (r) => ({r with PowerBattery: -r.Voltage_DC_Battery * r.Current_DC_Battery,\n                             SolarDC: r.IDC_CommonInverterData * r.UDC_CommonInverterData\n                                      + r.IDC_2_CommonInverterData * r.UDC_2_CommonInverterData,\n                             Consumed: ReLU(x: r.PowerAC\n                                       + r.PowerNet)\n    }))\n  |> keep(columns:[\"_time\",\n                   \"SolarDC\",\n                   \"Consumed\",\n                   \"PowerNet\",\n                   \"PowerBattery\"\n//                   \"Battery Loading Level\"\n])\n  |> experimental.unpivot()\n\nbasic\n  |> map(fn: (r) => ({r with _value: math.trunc(x: r._value)}))\n  |> map(fn: (r) => ({r with _field: strings.replaceAll(v: r._field,\n    u: if r._field == \"PowerBattery\" and r._value <= 0. then \"Battery Charging\" else \"Battery Discharging\",\n    t: \"PowerBattery\")}))\n  |> map(fn: (r) => ({r with _field: strings.replaceAll(v: r._field,\n    u: if r._field == \"PowerNet\" and r._value <= 0. then \"Net To\" else \"Net From\",\n    t: \"PowerNet\")}))\n  |> map(fn: (r) => ({r with _value: if r._field == \"Battery Charging\" then math.abs(x: r._value) else r._value}))\n  |> map(fn: (r) => ({r with _value: if r._field == \"Net To\" then math.abs(x: r._value) else r._value}))\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Current Power Reading",
      "transformations": [],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "e2f48814-8bd5-484d-8c8a-43571a6df6f2"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "displayName": "Battery Level, Temperature: $query0Â°C",
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "yellow",
                "value": 5
              },
              {
                "color": "green",
                "value": 80
              }
            ]
          },
          "unit": "%",
          "unitScale": true
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 0,
        "y": 10
      },
      "id": 2,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "10.3.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "e2f48814-8bd5-484d-8c8a-43571a6df6f2"
          },
          "query": "//\n// Battery Loading Level Current\n//\n\nfrom(bucket: \"Fronius\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r._measurement == \"Battery\" \n  and r._field == \"StateOfCharge_Relative\") \n  // or r._field == \"Temperature_Cell\"))\n  |> last()",
          "refId": "A"
        }
      ],
      "title": "Battery Status",
      "transformations": [],
      "type": "gauge"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 39,
  "tags": [
    "Production"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "22",
          "value": "22"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "e2f48814-8bd5-484d-8c8a-43571a6df6f2"
        },
        "definition": "//\n// Battery Loading Level Current\n//\n\nfrom(bucket: \"Fronius\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r._measurement == \"Battery\" and \n    r._field == \"Temperature_Cell\")\n  |> last()",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "query0",
        "options": [],
        "query": "//\n// Battery Loading Level Current\n//\n\nfrom(bucket: \"Fronius\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r._measurement == \"Battery\" and \n    r._field == \"Temperature_Cell\")\n  |> last()",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Current Reading",
  "uid": "fb002409-5864-4d30-810e-45cdd43f70c1",
  "version": 74,
  "weekStart": ""
}